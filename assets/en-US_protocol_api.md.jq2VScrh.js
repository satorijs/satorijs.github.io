import{_ as d,y as r,aa as a,p as o,X as t,z as i,l as n,R as c,j as l}from"./chunks/framework.CIYb0pjC.js";const I=JSON.parse('{"title":"API","description":"","frontmatter":{},"headers":[],"relativePath":"en-US/protocol/api.md","filePath":"en-US/protocol/api.md"}'),p={name:"en-US/protocol/api.md"},h={id:"platform-features",tabindex:"-1"};function u(f,e,m,b,g,P){const s=c("badge");return l(),r("div",null,[e[4]||(e[4]=a(`<h1 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h1><p>The Satori protocol defines a set of HTTP-based API services for sending messages and invoking other functionalities.</p><h2 id="http-api" tabindex="-1">HTTP API <a class="header-anchor" href="#http-api" aria-label="Permalink to &quot;HTTP API&quot;">​</a></h2><p>This is an HTTP RPC-style API, where all URLs follow the format <code>/{path}/{version}/{resource}.{method}</code>. Here, <code>path</code> is the deployment path (which can be empty), version is the API version number, <code>resource</code> is the resource type, and <code>method</code> is the method name.</p><p>Currently, Satori has only one version: v1.</p><p>Most API requests use <code>POST</code>, with parameters encoded in the request body as <code>application/json</code>. The return value is also in JSON format. As an exception, <a href="./../advanced/resource.html#api-upload-create">file upload</a> use <code>multipart/form-data</code> encoding.</p><p>The request headers must include the <code>Satori-Platform</code> and <code>Satori-User-ID</code> fields, representing the platform name and platform account, respectively.</p><p>A valid request example looks like this:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>POST /v1/channel.get</span></span>
<span class="line"><span>Content-Type: application/json</span></span>
<span class="line"><span>Authorization: Bearer 1234567890</span></span>
<span class="line"><span>Satori-Platform: discord</span></span>
<span class="line"><span>Satori-User-ID: 1234567890</span></span>
<span class="line"><span></span></span>
<span class="line"><span>{&quot;channel_id&quot;: &quot;1234567890&quot;}</span></span></code></pre></div><h3 id="authentication" tabindex="-1">Authentication <a class="header-anchor" href="#authentication" aria-label="Permalink to &quot;Authentication&quot;">​</a></h3><p>Authentication is implemented through the <code>Authorization</code> header in the HTTP API. The authentication tokens involved are distributed by the SDK, and this protocol imposes no restrictions on them.</p><p>If the SDK is not configured for authentication, the application does not need to provide the above header.</p><h3 id="status-codes" tabindex="-1">Status Codes <a class="header-anchor" href="#status-codes" aria-label="Permalink to &quot;Status Codes&quot;">​</a></h3><table tabindex="0"><thead><tr><th>状态码</th><th>描述</th></tr></thead><tbody><tr><td>200 (OK)</td><td>success</td></tr><tr><td>400 (BAD REQUEST)</td><td>invalid request format</td></tr><tr><td>401 (UNAUTHORIZED)</td><td>missing authentication</td></tr><tr><td>403 (FORBIDDEN)</td><td>insufficient permissions</td></tr><tr><td>404 (NOT FOUND)</td><td>API does not exist</td></tr><tr><td>405 (METHOD NOT ALLOWED)</td><td>method not allowed</td></tr><tr><td>5XX (SERVER ERROR)</td><td>server error</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If a standard API is not supported by a platform, it should return 404 (NOT FOUND) instead of 501 (NOT IMPLEMENTED). Only when an API is supported by the platform but not implemented by the adapter should it return 501.</p></div>`,15)),o("h3",h,[e[1]||(e[1]=t("Platform Features ")),i(s,{type:"warning"},{default:n(()=>e[0]||(e[0]=[t("experimental")])),_:1}),e[2]||(e[2]=t()),e[3]||(e[3]=o("a",{class:"header-anchor",href:"#platform-features","aria-label":'Permalink to "Platform Features <badge type="warning">experimental</badge> {#platform-features}"'},"​",-1))]),e[5]||(e[5]=a('<p>The <code>features</code> field in the <a href="./../resources/login.html#def-login">Login</a> object is an array of strings used to indicate platform features. These features can be used to determine whether a platform supports certain APIs. Valid platform features include:</p><ul><li>API availability, such as the feature <code>message.delete</code> indicating support for using <a href="./../resources/message.html#api-message-delete"><code>message.delete</code></a> to delete messages.</li><li>API additional features, such as the feature <code>message.list.from</code> indicating support for using message IDs as pagination tokens when querying message lists with <a href="./../resources/message.html#api-message-create"><code>message.list</code></a>.</li><li>Platform additional features, such as the feature <code>guild.plain</code> indicating that the platform&#39;s guild can only have one message channel.</li></ul><p>Currently, only the API names themselves are standardized. We will provide a more comprehensive list of standard features in future versions.</p><h3 id="advanced-apis" tabindex="-1">Advanced APIs <a class="header-anchor" href="#advanced-apis" aria-label="Permalink to &quot;Advanced APIs&quot;">​</a></h3><p>In addition to standard APIs, Satori also provides some advanced functionalities.</p><ul><li>Sub-routes under <code>/{path}/{version}/proxy</code> are used to proxy platform resources. See <a href="./../advanced/resource.html#proxy-route">Proxy Routes</a>.</li><li>Sub-routes under <code>/{path}/{version}/meta</code> are used to access SDK-related interfaces. See <a href="./../advanced/meta.html#api">Meta Information API</a>.</li><li>Sub-routes under <code>/{path}/{version}/internal</code> are used to access platform internal interfaces. See <a href="./../advanced/internal.html#api">Internal API</a>.</li></ul><h2 id="definitions" tabindex="-1">Definitions <a class="header-anchor" href="#definitions" aria-label="Permalink to &quot;Definitions&quot;">​</a></h2><h3 id="list" tabindex="-1">Paginated List <a class="header-anchor" href="#list" aria-label="Permalink to &quot;Paginated List {#list}&quot;">​</a></h3><p>Some API may return paginated data. In such cases, the response will be a <code>List</code> object:</p><table tabindex="0"><thead><tr><th>FIELD</th><th>TYPE</th><th>DESCRIPTION</th></tr></thead><tbody><tr><td><code>data</code></td><td>array</td><td>list of data</td></tr><tr><td><code>next</code></td><td>string?</td><td>token for the next page</td></tr></tbody></table><p>You can use the <code>next</code> token to fetch the next page of data. If <code>next</code> is null, it means there is no more data.</p><h3 id="bidi-list" tabindex="-1">Bidirectional Paginated List <a class="header-anchor" href="#bidi-list" aria-label="Permalink to &quot;Bidirectional Paginated List {#bidi-list}&quot;">​</a></h3><p>A very few APIs return paginated data that can extend in both directions. In such cases, the response will be a <code>BidiList</code> object:</p><table tabindex="0"><thead><tr><th>FIELD</th><th>TYPE</th><th>DESCRIPTION</th></tr></thead><tbody><tr><td><code>data</code></td><td>array</td><td>list of data</td></tr><tr><td><code>prev</code></td><td>string?</td><td>token for the previous page</td></tr><tr><td><code>next</code></td><td>string?</td><td>token for the next page</td></tr></tbody></table><p>In the corresponding APIs, you can specify the direction and order using the <code>direction</code> and <code>order</code> parameters.</p><p>The <code>direction</code> parameter has three possible values:</p><ul><li><code>before</code>: fetch data backward. In this case, <code>prev</code> and <code>next</code> are the same, both representing the token for the previous page.</li><li><code>after</code>: fetch data forward. In this case, <code>prev</code> and <code>next</code> are the same, both representing the token for the next page.</li><li><code>around</code>: fetch data in both directions. In this case, <code>prev</code> represents the token for the previous page, and <code>next</code> represents the token for the next page.</li></ul><p>If <code>prev</code> or <code>next</code> is missing, it means there is no more data in that direction.</p><p>The <code>order</code> parameter has two possible values:</p><ul><li><code>asc</code>: ascending order.</li><li><code>desc</code>: descending order.</li></ul>',20))])}const x=d(p,[["render",u]]);export{I as __pageData,x as default};
