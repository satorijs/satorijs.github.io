import{_ as n,y as s,p as e,X as o,z as d,l,aa as r,R as i,j as u}from"./chunks/framework.CIYb0pjC.js";const A=JSON.parse('{"title":"元信息 实验性","description":"","frontmatter":{},"headers":[],"relativePath":"zh-CN/advanced/meta.md","filePath":"zh-CN/advanced/meta.md"}'),b={name:"zh-CN/advanced/meta.md"},h={id:"元信息",tabindex:"-1"},m={class:"route"},p={id:"创建-webhook",tabindex:"-1"},k={class:"route"},f={id:"移除-webhook",tabindex:"-1"},g={class:"route"};function P(x,t,q,v,y,w){const a=i("badge");return u(),s("div",null,[e("h1",h,[t[1]||(t[1]=o("元信息 ")),d(a,{type:"warning"},{default:l(()=>t[0]||(t[0]=[o("实验性")])),_:1}),t[2]||(t[2]=o()),t[3]||(t[3]=e("a",{class:"header-anchor",href:"#元信息","aria-label":'Permalink to "元信息 <badge type="warning">实验性</badge>"'},"​",-1))]),t[18]||(t[18]=r('<div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>这是一个实验性功能，可能在未来的版本中发生变化。</p></div><p>元信息对象包含了与 SDK 状态相关、与具体的账号无关的信息，例如 <a href="./../advanced/resource.html#proxy-route">代理路由</a> 等。</p><p>元信息通过以下方式获取和更新：</p><ul><li>在 WebSocket 推送方式下，<code>READY</code> 信令将提供完整的元信息；</li><li>在 WebHook 推送方式下，应用启动时应当通过 API 获取元信息；</li><li>应用启动后，持续接收 <code>META</code> 信令和登录事件对元信息进行更新。</li></ul><p>需要注意的是，<code>META</code> 信令不反映登录状态变化，也不会包含 <code>logins</code> 字段。</p><p>元信息 API 通过 <code>/{path}/{version}/meta/{method}</code> 路由提供。通信方式与 <a href="./../protocol/api.html">HTTP API</a> 类似，但不需要 <code>Satori-Platform</code> 和 <code>Satori-User-ID</code> 请求头。</p><h2 id="类型定义" tabindex="-1">类型定义 <a class="header-anchor" href="#类型定义" aria-label="Permalink to &quot;类型定义&quot;">​</a></h2><h3 id="meta" tabindex="-1">Meta <a class="header-anchor" href="#meta" aria-label="Permalink to &quot;Meta&quot;">​</a></h3><table tabindex="0"><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>logins</code></td><td><a href="./../resources/login.html"><code>Login[]</code></a></td><td>登录信息</td></tr><tr><td><code>proxy_urls</code></td><td>string[]</td><td><a href="./../advanced/resource.html#proxy-route">代理路由</a> 列表</td></tr></tbody></table><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2><h3 id="获取元信息" tabindex="-1">获取元信息 <a class="header-anchor" href="#获取元信息" aria-label="Permalink to &quot;获取元信息&quot;">​</a></h3>',11)),e("blockquote",m,[d(a,null,{default:l(()=>t[4]||(t[4]=[o("POST")])),_:1}),t[5]||(t[5]=e("code",null,"/meta",-1))]),t[19]||(t[19]=e("p",null,[o("返回一个 "),e("a",{href:"#meta"},"Meta"),o(" 对象。")],-1)),e("h3",p,[t[7]||(t[7]=o("创建 WebHook ")),d(a,null,{default:l(()=>t[6]||(t[6]=[o("可选")])),_:1}),t[8]||(t[8]=o()),t[9]||(t[9]=e("a",{class:"header-anchor",href:"#创建-webhook","aria-label":'Permalink to "创建 WebHook <badge>可选</badge>"'},"​",-1))]),e("blockquote",k,[d(a,null,{default:l(()=>t[10]||(t[10]=[o("POST")])),_:1}),t[11]||(t[11]=e("code",null,"/meta/webhook.create",-1))]),t[20]||(t[20]=r('<table tabindex="0"><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>url</td><td>string</td><td>WebHook 地址</td></tr><tr><td>token</td><td>string?</td><td>鉴权令牌</td></tr></tbody></table>',1)),e("h3",f,[t[13]||(t[13]=o("移除 WebHook ")),d(a,null,{default:l(()=>t[12]||(t[12]=[o("可选")])),_:1}),t[14]||(t[14]=o()),t[15]||(t[15]=e("a",{class:"header-anchor",href:"#移除-webhook","aria-label":'Permalink to "移除 WebHook <badge>可选</badge>"'},"​",-1))]),e("blockquote",g,[d(a,null,{default:l(()=>t[16]||(t[16]=[o("POST")])),_:1}),t[17]||(t[17]=e("code",null,"/meta/webhook.delete",-1))]),t[21]||(t[21]=e("table",{tabindex:"0"},[e("thead",null,[e("tr",null,[e("th",null,"字段"),e("th",null,"类型"),e("th",null,"描述")])]),e("tbody",null,[e("tr",null,[e("td",null,"url"),e("td",null,"string"),e("td",null,"WebHook 地址")])])],-1))])}const S=n(b,[["render",P]]);export{A as __pageData,S as default};
