import{_ as o,y as t,aa as a,j as s}from"./chunks/framework.CIYb0pjC.js";const m=JSON.parse('{"title":"Overview","description":"","frontmatter":{},"headers":[],"relativePath":"en-US/protocol/index.md","filePath":"en-US/protocol/index.md"}'),r={name:"en-US/protocol/index.md"};function n(i,e,c,l,d,h){return s(),t("div",null,e[0]||(e[0]=[a('<h1 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h1><p>The communication methods of the Satori protocol are divided into two parts:</p><ul><li>A set of HTTP-based API services for sending messages and invoking other functionalities.</li><li>A set of event services based on WebSocket or WebHook for receiving messages and other events.</li></ul><h2 id="core-concepts" tabindex="-1">Core Concepts <a class="header-anchor" href="#core-concepts" aria-label="Permalink to &quot;Core Concepts&quot;">​</a></h2><p>Before we begin, let’s familiarize ourselves with some core concepts related to Satori.</p><p><strong>SDK</strong> refers to software that implements the Satori protocol. <strong>Application</strong> refers to software that integrates with the Satori protocol. Applications communicate with the SDK to enable functionalities of chat platforms.</p><p><strong>Platform</strong> refers to chat platforms, such as Discord, Telegram, etc. Users within the same platform can send messages to each other, while users across different platforms cannot. For self-hosted chat platforms like Rocket Chat, each independent server is considered a different platform.</p><p><strong>Message</strong> is literally a message. It is usually in text or rich text format and may sometimes include media resources such as images or voice. In Koishi, messages are uniformly encoded using message elements.</p><p><strong>Channel</strong> is a collection of messages. A channel contains a series of messages with a temporal and logical order. Channels are divided into private channels and group channels. Private channels involve exactly two participants, while group channels can have any number of participants.</p><p><strong>Guild</strong> is a collection of platform users. A guild typically includes a group of users and channels, with a permission mechanism allowing some users to manage it. On some platforms, the concepts of guilds and group channels coincide (e.g., QQ): a guild has exactly one group channel. Private channels do not belong to any guild.</p><h2 id="optional-fields" tabindex="-1">Optional Fields <a class="header-anchor" href="#optional-fields" aria-label="Permalink to &quot;Optional Fields&quot;">​</a></h2><p>Due to differences in platform implementations, most fields in the Satori protocol are optional. Optional fields are marked with a <code>?</code> after their type.</p><p>For any optional field, the result of the relevant API call may either omit the field or have its value as <code>null</code>. The former indicates that the API does not provide this field, though it may be provided by other APIs; the latter indicates that the API provides this field, but its value is <code>null</code>.</p><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;Resources&quot;">​</a></h2><p>Resources in the Satori protocol refer to objects with a defined structure. For example, <a href="./../resources/user.html">User</a>, <a href="./../resources/channel.html">Channel</a>, <a href="./../resources/member.html">Message</a>, etc., are all resources. Some events and API responses include these resource objects.</p><p>A field in a resource object can be another resource object. For example, the <code>user</code> field in a message object is a user object. When resource objects are nested at multiple levels, the inner resources are uniformly promoted to the outermost layer. For instance, when a message event is received, the event body can access resources such as <code>message</code>, <code>member</code>, <code>user</code>, and <code>channel</code>, but the <code>message</code> object will no longer contain the <code>member</code> and <code>user</code> fields.</p>',16)]))}const u=o(r,[["render",n]]);export{m as __pageData,u as default};
