import{_ as a,y as r,aa as i,p as t,X as n,z as l,l as d,R as s,j as u}from"./chunks/framework.CIYb0pjC.js";const x=JSON.parse('{"title":"Login","description":"","frontmatter":{},"headers":[],"relativePath":"en-US/resources/login.md","filePath":"en-US/resources/login.md"}'),g={name:"en-US/resources/login.md"},p={tabindex:"0"},f={class:"route"};function m(b,e,h,v,q,P){const o=s("badge");return u(),r("div",null,[e[24]||(e[24]=i('<h1 id="login" tabindex="-1">Login <a class="header-anchor" href="#login" aria-label="Permalink to &quot;Login&quot;">​</a></h1><h2 id="definitions" tabindex="-1">Definitions <a class="header-anchor" href="#definitions" aria-label="Permalink to &quot;Definitions&quot;">​</a></h2><h3 id="def-login" tabindex="-1">Login <a class="header-anchor" href="#def-login" aria-label="Permalink to &quot;Login {#def-login}&quot;">​</a></h3>',3)),t("table",p,[e[20]||(e[20]=t("thead",null,[t("tr",null,[t("th",null,"FIELD"),t("th",null,"TYPE"),t("th",null,"DESCRIPTION")])],-1)),t("tbody",null,[t("tr",null,[e[4]||(e[4]=t("td",null,"sn",-1)),e[5]||(e[5]=t("td",null,"number",-1)),t("td",null,[e[1]||(e[1]=n("serial number")),e[2]||(e[2]=t("sup",null,[t("a",{href:"#login-sn"},"[1]")],-1)),e[3]||(e[3]=n()),l(o,{type:"warning"},{default:d(()=>e[0]||(e[0]=[n("experimental")])),_:1})])]),e[17]||(e[17]=t("tr",null,[t("td",null,"platform"),t("td",null,[n("string?"),t("sup",null,[t("a",{href:"#login-nullable"},"[3]")])]),t("td",null,"platform name")],-1)),e[18]||(e[18]=t("tr",null,[t("td",null,"user"),t("td",null,[t("a",{href:"./user.html"},"User"),n("?"),t("sup",null,[t("a",{href:"#login-nullable"},"[3]")])]),t("td",null,[n("user object"),t("sup",null,[t("a",{href:"#login-user"},"[2]")])])],-1)),e[19]||(e[19]=t("tr",null,[t("td",null,"status"),t("td",null,[t("a",{href:"#def-login-status"},"LoginStatus")]),t("td",null,"login status")],-1)),t("tr",null,[e[9]||(e[9]=t("td",null,"adapter",-1)),e[10]||(e[10]=t("td",null,"string",-1)),t("td",null,[e[7]||(e[7]=t("a",{href:"./../advanced/internal.html#platform-vs-adapter"},"adapter name",-1)),e[8]||(e[8]=n()),l(o,{type:"warning"},{default:d(()=>e[6]||(e[6]=[n("experimental")])),_:1})])]),t("tr",null,[e[15]||(e[15]=t("td",null,"features",-1)),e[16]||(e[16]=t("td",null,"string[]?",-1)),t("td",null,[e[12]||(e[12]=n("list of ")),e[13]||(e[13]=t("a",{href:"./../protocol/api.html#platform-features"},"platform features",-1)),e[14]||(e[14]=n()),l(o,{type:"warning"},{default:d(()=>e[11]||(e[11]=[n("experimental")])),_:1})])])])]),e[25]||(e[25]=i('<div class="tip custom-block"><p class="custom-block-title">TIP</p><p id="login-sn">[1] <code>login.sn</code> is only used to identify the Login object and is unrelated to platform logic (meaning no platform-related API calls require this <code>sn</code>). It is also not persisted (meaning the <code>sn</code> for the same login may differ across connections, and different logins may share the same <code>sn</code>). Please especially distinguish it from <code>login.user.id</code>.</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p id="login-user">[2] <code>login.user</code> is not necessarily a real platform user; it can also be a bot or application identity assigned by the platform.</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p id="login-nullable">[3] When <code>login.status</code> is not <code>ONLINE</code>, <code>platform</code> and <code>user</code> may be null. However, in all non-login events, <code>login</code> is guaranteed to be in the <code>ONLINE</code> state, so <code>platform</code> and <code>user</code> will always have truthy values. From an SDK development perspective, it is a good practice to provide different types for login and non-login events.</p></div><h3 id="def-login-status" tabindex="-1">LoginStatus <a class="header-anchor" href="#def-login-status" aria-label="Permalink to &quot;LoginStatus {#def-login-status}&quot;">​</a></h3><table tabindex="0"><thead><tr><th>TYPE</th><th>VALUE</th><th>DESCRIPTION</th></tr></thead><tbody><tr><td>OFFLINE</td><td>0</td><td>offline</td></tr><tr><td>ONLINE</td><td>1</td><td>online</td></tr><tr><td>CONNECT</td><td>2</td><td>connecting</td></tr><tr><td>DISCONNECT</td><td>3</td><td>disconnecting</td></tr><tr><td>RECONNECT</td><td>4</td><td>reconnecting</td></tr></tbody></table><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2><h3 id="api-login-get" tabindex="-1">Get Login <a class="header-anchor" href="#api-login-get" aria-label="Permalink to &quot;Get Login {#api-login-get}&quot;">​</a></h3>',7)),t("blockquote",f,[l(o,null,{default:d(()=>e[21]||(e[21]=[n("POST")])),_:1}),e[22]||(e[22]=n()),e[23]||(e[23]=t("code",null,"/login.get",-1))]),e[26]||(e[26]=i('<p>Get the current login. Returns a <a href="#def-login"><code>Login</code></a> object.</p><h2 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-label="Permalink to &quot;Events&quot;">​</a></h2><h3 id="login-added" tabindex="-1">login-added <a class="header-anchor" href="#login-added" aria-label="Permalink to &quot;login-added&quot;">​</a></h3><p>Triggered when a login is created. Required resource: <a href="#def-login"><code>login</code></a>.</p><h3 id="login-removed" tabindex="-1">login-removed <a class="header-anchor" href="#login-removed" aria-label="Permalink to &quot;login-removed&quot;">​</a></h3><p>Triggered when a login is deleted. Required resource: <a href="#def-login"><code>login</code></a>.</p><h3 id="login-updated" tabindex="-1">login-updated <a class="header-anchor" href="#login-updated" aria-label="Permalink to &quot;login-updated&quot;">​</a></h3><p>Triggered when login information is updated. Required resource: <a href="#def-login"><code>login</code></a>.</p>',8))])}const N=a(g,[["render",m]]);export{x as __pageData,N as default};
